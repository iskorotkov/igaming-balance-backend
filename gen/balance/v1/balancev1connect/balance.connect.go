// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: balance/v1/balance.proto

package balancev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/iskorotkov/igaming-balance-backend/gen/balance/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// BalanceServiceName is the fully-qualified name of the BalanceService service.
	BalanceServiceName = "balance.v1.BalanceService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// BalanceServiceRecordTxProcedure is the fully-qualified name of the BalanceService's RecordTx RPC.
	BalanceServiceRecordTxProcedure = "/balance.v1.BalanceService/RecordTx"
	// BalanceServiceCancelTxsProcedure is the fully-qualified name of the BalanceService's CancelTxs
	// RPC.
	BalanceServiceCancelTxsProcedure = "/balance.v1.BalanceService/CancelTxs"
	// BalanceServiceListTxProcedure is the fully-qualified name of the BalanceService's ListTx RPC.
	BalanceServiceListTxProcedure = "/balance.v1.BalanceService/ListTx"
	// BalanceServiceOpenBalanceProcedure is the fully-qualified name of the BalanceService's
	// OpenBalance RPC.
	BalanceServiceOpenBalanceProcedure = "/balance.v1.BalanceService/OpenBalance"
	// BalanceServiceBalanceProcedure is the fully-qualified name of the BalanceService's Balance RPC.
	BalanceServiceBalanceProcedure = "/balance.v1.BalanceService/Balance"
)

// BalanceServiceClient is a client for the balance.v1.BalanceService service.
type BalanceServiceClient interface {
	RecordTx(context.Context, *connect.Request[v1.RecordTxRequest]) (*connect.Response[emptypb.Empty], error)
	CancelTxs(context.Context, *connect.Request[v1.CancelTxsRequest]) (*connect.Response[emptypb.Empty], error)
	ListTx(context.Context, *connect.Request[v1.ListTxRequest]) (*connect.Response[v1.ListTxResponse], error)
	OpenBalance(context.Context, *connect.Request[v1.OpenBalanceRequest]) (*connect.Response[emptypb.Empty], error)
	Balance(context.Context, *connect.Request[v1.BalanceRequest]) (*connect.Response[v1.BalanceResponse], error)
}

// NewBalanceServiceClient constructs a client for the balance.v1.BalanceService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBalanceServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) BalanceServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	balanceServiceMethods := v1.File_balance_v1_balance_proto.Services().ByName("BalanceService").Methods()
	return &balanceServiceClient{
		recordTx: connect.NewClient[v1.RecordTxRequest, emptypb.Empty](
			httpClient,
			baseURL+BalanceServiceRecordTxProcedure,
			connect.WithSchema(balanceServiceMethods.ByName("RecordTx")),
			connect.WithClientOptions(opts...),
		),
		cancelTxs: connect.NewClient[v1.CancelTxsRequest, emptypb.Empty](
			httpClient,
			baseURL+BalanceServiceCancelTxsProcedure,
			connect.WithSchema(balanceServiceMethods.ByName("CancelTxs")),
			connect.WithClientOptions(opts...),
		),
		listTx: connect.NewClient[v1.ListTxRequest, v1.ListTxResponse](
			httpClient,
			baseURL+BalanceServiceListTxProcedure,
			connect.WithSchema(balanceServiceMethods.ByName("ListTx")),
			connect.WithClientOptions(opts...),
		),
		openBalance: connect.NewClient[v1.OpenBalanceRequest, emptypb.Empty](
			httpClient,
			baseURL+BalanceServiceOpenBalanceProcedure,
			connect.WithSchema(balanceServiceMethods.ByName("OpenBalance")),
			connect.WithClientOptions(opts...),
		),
		balance: connect.NewClient[v1.BalanceRequest, v1.BalanceResponse](
			httpClient,
			baseURL+BalanceServiceBalanceProcedure,
			connect.WithSchema(balanceServiceMethods.ByName("Balance")),
			connect.WithClientOptions(opts...),
		),
	}
}

// balanceServiceClient implements BalanceServiceClient.
type balanceServiceClient struct {
	recordTx    *connect.Client[v1.RecordTxRequest, emptypb.Empty]
	cancelTxs   *connect.Client[v1.CancelTxsRequest, emptypb.Empty]
	listTx      *connect.Client[v1.ListTxRequest, v1.ListTxResponse]
	openBalance *connect.Client[v1.OpenBalanceRequest, emptypb.Empty]
	balance     *connect.Client[v1.BalanceRequest, v1.BalanceResponse]
}

// RecordTx calls balance.v1.BalanceService.RecordTx.
func (c *balanceServiceClient) RecordTx(ctx context.Context, req *connect.Request[v1.RecordTxRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.recordTx.CallUnary(ctx, req)
}

// CancelTxs calls balance.v1.BalanceService.CancelTxs.
func (c *balanceServiceClient) CancelTxs(ctx context.Context, req *connect.Request[v1.CancelTxsRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.cancelTxs.CallUnary(ctx, req)
}

// ListTx calls balance.v1.BalanceService.ListTx.
func (c *balanceServiceClient) ListTx(ctx context.Context, req *connect.Request[v1.ListTxRequest]) (*connect.Response[v1.ListTxResponse], error) {
	return c.listTx.CallUnary(ctx, req)
}

// OpenBalance calls balance.v1.BalanceService.OpenBalance.
func (c *balanceServiceClient) OpenBalance(ctx context.Context, req *connect.Request[v1.OpenBalanceRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.openBalance.CallUnary(ctx, req)
}

// Balance calls balance.v1.BalanceService.Balance.
func (c *balanceServiceClient) Balance(ctx context.Context, req *connect.Request[v1.BalanceRequest]) (*connect.Response[v1.BalanceResponse], error) {
	return c.balance.CallUnary(ctx, req)
}

// BalanceServiceHandler is an implementation of the balance.v1.BalanceService service.
type BalanceServiceHandler interface {
	RecordTx(context.Context, *connect.Request[v1.RecordTxRequest]) (*connect.Response[emptypb.Empty], error)
	CancelTxs(context.Context, *connect.Request[v1.CancelTxsRequest]) (*connect.Response[emptypb.Empty], error)
	ListTx(context.Context, *connect.Request[v1.ListTxRequest]) (*connect.Response[v1.ListTxResponse], error)
	OpenBalance(context.Context, *connect.Request[v1.OpenBalanceRequest]) (*connect.Response[emptypb.Empty], error)
	Balance(context.Context, *connect.Request[v1.BalanceRequest]) (*connect.Response[v1.BalanceResponse], error)
}

// NewBalanceServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBalanceServiceHandler(svc BalanceServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	balanceServiceMethods := v1.File_balance_v1_balance_proto.Services().ByName("BalanceService").Methods()
	balanceServiceRecordTxHandler := connect.NewUnaryHandler(
		BalanceServiceRecordTxProcedure,
		svc.RecordTx,
		connect.WithSchema(balanceServiceMethods.ByName("RecordTx")),
		connect.WithHandlerOptions(opts...),
	)
	balanceServiceCancelTxsHandler := connect.NewUnaryHandler(
		BalanceServiceCancelTxsProcedure,
		svc.CancelTxs,
		connect.WithSchema(balanceServiceMethods.ByName("CancelTxs")),
		connect.WithHandlerOptions(opts...),
	)
	balanceServiceListTxHandler := connect.NewUnaryHandler(
		BalanceServiceListTxProcedure,
		svc.ListTx,
		connect.WithSchema(balanceServiceMethods.ByName("ListTx")),
		connect.WithHandlerOptions(opts...),
	)
	balanceServiceOpenBalanceHandler := connect.NewUnaryHandler(
		BalanceServiceOpenBalanceProcedure,
		svc.OpenBalance,
		connect.WithSchema(balanceServiceMethods.ByName("OpenBalance")),
		connect.WithHandlerOptions(opts...),
	)
	balanceServiceBalanceHandler := connect.NewUnaryHandler(
		BalanceServiceBalanceProcedure,
		svc.Balance,
		connect.WithSchema(balanceServiceMethods.ByName("Balance")),
		connect.WithHandlerOptions(opts...),
	)
	return "/balance.v1.BalanceService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case BalanceServiceRecordTxProcedure:
			balanceServiceRecordTxHandler.ServeHTTP(w, r)
		case BalanceServiceCancelTxsProcedure:
			balanceServiceCancelTxsHandler.ServeHTTP(w, r)
		case BalanceServiceListTxProcedure:
			balanceServiceListTxHandler.ServeHTTP(w, r)
		case BalanceServiceOpenBalanceProcedure:
			balanceServiceOpenBalanceHandler.ServeHTTP(w, r)
		case BalanceServiceBalanceProcedure:
			balanceServiceBalanceHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedBalanceServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBalanceServiceHandler struct{}

func (UnimplementedBalanceServiceHandler) RecordTx(context.Context, *connect.Request[v1.RecordTxRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("balance.v1.BalanceService.RecordTx is not implemented"))
}

func (UnimplementedBalanceServiceHandler) CancelTxs(context.Context, *connect.Request[v1.CancelTxsRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("balance.v1.BalanceService.CancelTxs is not implemented"))
}

func (UnimplementedBalanceServiceHandler) ListTx(context.Context, *connect.Request[v1.ListTxRequest]) (*connect.Response[v1.ListTxResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("balance.v1.BalanceService.ListTx is not implemented"))
}

func (UnimplementedBalanceServiceHandler) OpenBalance(context.Context, *connect.Request[v1.OpenBalanceRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("balance.v1.BalanceService.OpenBalance is not implemented"))
}

func (UnimplementedBalanceServiceHandler) Balance(context.Context, *connect.Request[v1.BalanceRequest]) (*connect.Response[v1.BalanceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("balance.v1.BalanceService.Balance is not implemented"))
}

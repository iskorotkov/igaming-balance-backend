// Code generated by "enumer -type=State -trimprefix=State -json -text -yaml -sql"; DO NOT EDIT.

package domain

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _StateName = "UnknownDepositWithdraw"

var _StateIndex = [...]uint8{0, 7, 14, 22}

const _StateLowerName = "unknowndepositwithdraw"

func (i State) String() string {
	if i < 0 || i >= State(len(_StateIndex)-1) {
		return fmt.Sprintf("State(%d)", i)
	}
	return _StateName[_StateIndex[i]:_StateIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _StateNoOp() {
	var x [1]struct{}
	_ = x[StateUnknown-(0)]
	_ = x[StateDeposit-(1)]
	_ = x[StateWithdraw-(2)]
}

var _StateValues = []State{StateUnknown, StateDeposit, StateWithdraw}

var _StateNameToValueMap = map[string]State{
	_StateName[0:7]:        StateUnknown,
	_StateLowerName[0:7]:   StateUnknown,
	_StateName[7:14]:       StateDeposit,
	_StateLowerName[7:14]:  StateDeposit,
	_StateName[14:22]:      StateWithdraw,
	_StateLowerName[14:22]: StateWithdraw,
}

var _StateNames = []string{
	_StateName[0:7],
	_StateName[7:14],
	_StateName[14:22],
}

// StateString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func StateString(s string) (State, error) {
	if val, ok := _StateNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _StateNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to State values", s)
}

// StateValues returns all values of the enum
func StateValues() []State {
	return _StateValues
}

// StateStrings returns a slice of all String values of the enum
func StateStrings() []string {
	strs := make([]string, len(_StateNames))
	copy(strs, _StateNames)
	return strs
}

// IsAState returns "true" if the value is listed in the enum definition. "false" otherwise
func (i State) IsAState() bool {
	for _, v := range _StateValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for State
func (i State) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for State
func (i *State) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("State should be a string, got %s", data)
	}

	var err error
	*i, err = StateString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for State
func (i State) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for State
func (i *State) UnmarshalText(text []byte) error {
	var err error
	*i, err = StateString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for State
func (i State) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for State
func (i *State) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = StateString(s)
	return err
}

func (i State) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *State) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of State: %[1]T(%[1]v)", value)
	}

	val, err := StateString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}

// Code generated by "enumer -type=Source -trimprefix=Source -json -text -yaml -sql"; DO NOT EDIT.

package domain

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _SourceName = "UnknownGamePaymentService"

var _SourceIndex = [...]uint8{0, 7, 11, 18, 25}

const _SourceLowerName = "unknowngamepaymentservice"

func (i Source) String() string {
	if i < 0 || i >= Source(len(_SourceIndex)-1) {
		return fmt.Sprintf("Source(%d)", i)
	}
	return _SourceName[_SourceIndex[i]:_SourceIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _SourceNoOp() {
	var x [1]struct{}
	_ = x[SourceUnknown-(0)]
	_ = x[SourceGame-(1)]
	_ = x[SourcePayment-(2)]
	_ = x[SourceService-(3)]
}

var _SourceValues = []Source{SourceUnknown, SourceGame, SourcePayment, SourceService}

var _SourceNameToValueMap = map[string]Source{
	_SourceName[0:7]:        SourceUnknown,
	_SourceLowerName[0:7]:   SourceUnknown,
	_SourceName[7:11]:       SourceGame,
	_SourceLowerName[7:11]:  SourceGame,
	_SourceName[11:18]:      SourcePayment,
	_SourceLowerName[11:18]: SourcePayment,
	_SourceName[18:25]:      SourceService,
	_SourceLowerName[18:25]: SourceService,
}

var _SourceNames = []string{
	_SourceName[0:7],
	_SourceName[7:11],
	_SourceName[11:18],
	_SourceName[18:25],
}

// SourceString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func SourceString(s string) (Source, error) {
	if val, ok := _SourceNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _SourceNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Source values", s)
}

// SourceValues returns all values of the enum
func SourceValues() []Source {
	return _SourceValues
}

// SourceStrings returns a slice of all String values of the enum
func SourceStrings() []string {
	strs := make([]string, len(_SourceNames))
	copy(strs, _SourceNames)
	return strs
}

// IsASource returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Source) IsASource() bool {
	for _, v := range _SourceValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Source
func (i Source) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Source
func (i *Source) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Source should be a string, got %s", data)
	}

	var err error
	*i, err = SourceString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for Source
func (i Source) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Source
func (i *Source) UnmarshalText(text []byte) error {
	var err error
	*i, err = SourceString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for Source
func (i Source) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for Source
func (i *Source) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = SourceString(s)
	return err
}

func (i Source) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *Source) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of Source: %[1]T(%[1]v)", value)
	}

	val, err := SourceString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}

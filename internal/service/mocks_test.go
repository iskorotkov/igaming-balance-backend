// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package service

import (
	"context"

	"github.com/google/uuid"
	"github.com/iskorotkov/igaming-balance-backend/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewMockStorage creates a new instance of MockStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStorage {
	mock := &MockStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockStorage is an autogenerated mock type for the Storage type
type MockStorage struct {
	mock.Mock
}

type MockStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStorage) EXPECT() *MockStorage_Expecter {
	return &MockStorage_Expecter{mock: &_m.Mock}
}

// Balance provides a mock function for the type MockStorage
func (_mock *MockStorage) Balance(ctx context.Context, balanceID uuid.UUID) (domain.Balance, error) {
	ret := _mock.Called(ctx, balanceID)

	if len(ret) == 0 {
		panic("no return value specified for Balance")
	}

	var r0 domain.Balance
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (domain.Balance, error)); ok {
		return returnFunc(ctx, balanceID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) domain.Balance); ok {
		r0 = returnFunc(ctx, balanceID)
	} else {
		r0 = ret.Get(0).(domain.Balance)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, balanceID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorage_Balance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Balance'
type MockStorage_Balance_Call struct {
	*mock.Call
}

// Balance is a helper method to define mock.On call
//   - ctx context.Context
//   - balanceID uuid.UUID
func (_e *MockStorage_Expecter) Balance(ctx interface{}, balanceID interface{}) *MockStorage_Balance_Call {
	return &MockStorage_Balance_Call{Call: _e.mock.On("Balance", ctx, balanceID)}
}

func (_c *MockStorage_Balance_Call) Run(run func(ctx context.Context, balanceID uuid.UUID)) *MockStorage_Balance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStorage_Balance_Call) Return(balance domain.Balance, err error) *MockStorage_Balance_Call {
	_c.Call.Return(balance, err)
	return _c
}

func (_c *MockStorage_Balance_Call) RunAndReturn(run func(ctx context.Context, balanceID uuid.UUID) (domain.Balance, error)) *MockStorage_Balance_Call {
	_c.Call.Return(run)
	return _c
}

// CancelTxs provides a mock function for the type MockStorage
func (_mock *MockStorage) CancelTxs(ctx context.Context, balanceID uuid.UUID, txIDs []uuid.UUID) error {
	ret := _mock.Called(ctx, balanceID, txIDs)

	if len(ret) == 0 {
		panic("no return value specified for CancelTxs")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, []uuid.UUID) error); ok {
		r0 = returnFunc(ctx, balanceID, txIDs)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorage_CancelTxs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelTxs'
type MockStorage_CancelTxs_Call struct {
	*mock.Call
}

// CancelTxs is a helper method to define mock.On call
//   - ctx context.Context
//   - balanceID uuid.UUID
//   - txIDs []uuid.UUID
func (_e *MockStorage_Expecter) CancelTxs(ctx interface{}, balanceID interface{}, txIDs interface{}) *MockStorage_CancelTxs_Call {
	return &MockStorage_CancelTxs_Call{Call: _e.mock.On("CancelTxs", ctx, balanceID, txIDs)}
}

func (_c *MockStorage_CancelTxs_Call) Run(run func(ctx context.Context, balanceID uuid.UUID, txIDs []uuid.UUID)) *MockStorage_CancelTxs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 []uuid.UUID
		if args[2] != nil {
			arg2 = args[2].([]uuid.UUID)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockStorage_CancelTxs_Call) Return(err error) *MockStorage_CancelTxs_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorage_CancelTxs_Call) RunAndReturn(run func(ctx context.Context, balanceID uuid.UUID, txIDs []uuid.UUID) error) *MockStorage_CancelTxs_Call {
	_c.Call.Return(run)
	return _c
}

// OpenBalance provides a mock function for the type MockStorage
func (_mock *MockStorage) OpenBalance(ctx context.Context, balanceID uuid.UUID) error {
	ret := _mock.Called(ctx, balanceID)

	if len(ret) == 0 {
		panic("no return value specified for OpenBalance")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, balanceID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorage_OpenBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OpenBalance'
type MockStorage_OpenBalance_Call struct {
	*mock.Call
}

// OpenBalance is a helper method to define mock.On call
//   - ctx context.Context
//   - balanceID uuid.UUID
func (_e *MockStorage_Expecter) OpenBalance(ctx interface{}, balanceID interface{}) *MockStorage_OpenBalance_Call {
	return &MockStorage_OpenBalance_Call{Call: _e.mock.On("OpenBalance", ctx, balanceID)}
}

func (_c *MockStorage_OpenBalance_Call) Run(run func(ctx context.Context, balanceID uuid.UUID)) *MockStorage_OpenBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStorage_OpenBalance_Call) Return(err error) *MockStorage_OpenBalance_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorage_OpenBalance_Call) RunAndReturn(run func(ctx context.Context, balanceID uuid.UUID) error) *MockStorage_OpenBalance_Call {
	_c.Call.Return(run)
	return _c
}

// PreviousTxs provides a mock function for the type MockStorage
func (_mock *MockStorage) PreviousTxs(ctx context.Context, balanceID uuid.UUID, includeDeleted bool, before uuid.UUID, limit int) ([]domain.Tx, error) {
	ret := _mock.Called(ctx, balanceID, includeDeleted, before, limit)

	if len(ret) == 0 {
		panic("no return value specified for PreviousTxs")
	}

	var r0 []domain.Tx
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, bool, uuid.UUID, int) ([]domain.Tx, error)); ok {
		return returnFunc(ctx, balanceID, includeDeleted, before, limit)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, bool, uuid.UUID, int) []domain.Tx); ok {
		r0 = returnFunc(ctx, balanceID, includeDeleted, before, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Tx)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, bool, uuid.UUID, int) error); ok {
		r1 = returnFunc(ctx, balanceID, includeDeleted, before, limit)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorage_PreviousTxs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PreviousTxs'
type MockStorage_PreviousTxs_Call struct {
	*mock.Call
}

// PreviousTxs is a helper method to define mock.On call
//   - ctx context.Context
//   - balanceID uuid.UUID
//   - includeDeleted bool
//   - before uuid.UUID
//   - limit int
func (_e *MockStorage_Expecter) PreviousTxs(ctx interface{}, balanceID interface{}, includeDeleted interface{}, before interface{}, limit interface{}) *MockStorage_PreviousTxs_Call {
	return &MockStorage_PreviousTxs_Call{Call: _e.mock.On("PreviousTxs", ctx, balanceID, includeDeleted, before, limit)}
}

func (_c *MockStorage_PreviousTxs_Call) Run(run func(ctx context.Context, balanceID uuid.UUID, includeDeleted bool, before uuid.UUID, limit int)) *MockStorage_PreviousTxs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 bool
		if args[2] != nil {
			arg2 = args[2].(bool)
		}
		var arg3 uuid.UUID
		if args[3] != nil {
			arg3 = args[3].(uuid.UUID)
		}
		var arg4 int
		if args[4] != nil {
			arg4 = args[4].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockStorage_PreviousTxs_Call) Return(txs []domain.Tx, err error) *MockStorage_PreviousTxs_Call {
	_c.Call.Return(txs, err)
	return _c
}

func (_c *MockStorage_PreviousTxs_Call) RunAndReturn(run func(ctx context.Context, balanceID uuid.UUID, includeDeleted bool, before uuid.UUID, limit int) ([]domain.Tx, error)) *MockStorage_PreviousTxs_Call {
	_c.Call.Return(run)
	return _c
}

// RecentTxs provides a mock function for the type MockStorage
func (_mock *MockStorage) RecentTxs(ctx context.Context, balanceID uuid.UUID, includeDeleted bool, limit int) ([]domain.Tx, error) {
	ret := _mock.Called(ctx, balanceID, includeDeleted, limit)

	if len(ret) == 0 {
		panic("no return value specified for RecentTxs")
	}

	var r0 []domain.Tx
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, bool, int) ([]domain.Tx, error)); ok {
		return returnFunc(ctx, balanceID, includeDeleted, limit)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, bool, int) []domain.Tx); ok {
		r0 = returnFunc(ctx, balanceID, includeDeleted, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Tx)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, bool, int) error); ok {
		r1 = returnFunc(ctx, balanceID, includeDeleted, limit)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorage_RecentTxs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecentTxs'
type MockStorage_RecentTxs_Call struct {
	*mock.Call
}

// RecentTxs is a helper method to define mock.On call
//   - ctx context.Context
//   - balanceID uuid.UUID
//   - includeDeleted bool
//   - limit int
func (_e *MockStorage_Expecter) RecentTxs(ctx interface{}, balanceID interface{}, includeDeleted interface{}, limit interface{}) *MockStorage_RecentTxs_Call {
	return &MockStorage_RecentTxs_Call{Call: _e.mock.On("RecentTxs", ctx, balanceID, includeDeleted, limit)}
}

func (_c *MockStorage_RecentTxs_Call) Run(run func(ctx context.Context, balanceID uuid.UUID, includeDeleted bool, limit int)) *MockStorage_RecentTxs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 bool
		if args[2] != nil {
			arg2 = args[2].(bool)
		}
		var arg3 int
		if args[3] != nil {
			arg3 = args[3].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockStorage_RecentTxs_Call) Return(txs []domain.Tx, err error) *MockStorage_RecentTxs_Call {
	_c.Call.Return(txs, err)
	return _c
}

func (_c *MockStorage_RecentTxs_Call) RunAndReturn(run func(ctx context.Context, balanceID uuid.UUID, includeDeleted bool, limit int) ([]domain.Tx, error)) *MockStorage_RecentTxs_Call {
	_c.Call.Return(run)
	return _c
}

// RecordTx provides a mock function for the type MockStorage
func (_mock *MockStorage) RecordTx(ctx context.Context, tx domain.Tx) error {
	ret := _mock.Called(ctx, tx)

	if len(ret) == 0 {
		panic("no return value specified for RecordTx")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Tx) error); ok {
		r0 = returnFunc(ctx, tx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorage_RecordTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecordTx'
type MockStorage_RecordTx_Call struct {
	*mock.Call
}

// RecordTx is a helper method to define mock.On call
//   - ctx context.Context
//   - tx domain.Tx
func (_e *MockStorage_Expecter) RecordTx(ctx interface{}, tx interface{}) *MockStorage_RecordTx_Call {
	return &MockStorage_RecordTx_Call{Call: _e.mock.On("RecordTx", ctx, tx)}
}

func (_c *MockStorage_RecordTx_Call) Run(run func(ctx context.Context, tx domain.Tx)) *MockStorage_RecordTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.Tx
		if args[1] != nil {
			arg1 = args[1].(domain.Tx)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStorage_RecordTx_Call) Return(err error) *MockStorage_RecordTx_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorage_RecordTx_Call) RunAndReturn(run func(ctx context.Context, tx domain.Tx) error) *MockStorage_RecordTx_Call {
	_c.Call.Return(run)
	return _c
}
